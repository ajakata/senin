
###################################################################################################################
# Exclusions
###################################################################################################################

# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ (.DS_Store|.htpasswd|.htaccess) {
	deny all;
}

## Disable .htaccess and other hidden files
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
	deny all;
}

###################################################################################################################
# Security
###################################################################################################################

# Generic security enhancements. Use https://securityheaders.io to test
# and recommend further improvements.

# Hide Nginx version in error messages and reponse headers.
server_tokens off;

# Don't allow pages to be rendered in an iframe on external domains.
add_header X-Frame-Options "SAMEORIGIN" always;

# MIME sniffing prevention
add_header X-Content-Type-Options "nosniff" always;

# Enable cross-site scripting filter in supported browsers.
add_header X-Xss-Protection "1; mode=block" always;

# Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
# only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
# for an in-depth guide on creating a more restrictive policy.

# uncomment out if you are ussing https/SSL
# add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

location /xmlrpc.php {
    deny all;
}

###################################################################################################################
# Static files
###################################################################################################################

# Don't cache appcache, document html and data.
location ~* \.(?:manifest|appcache|html?|xml)$ {
    expires -1;
}

# Cache RSS and Atom feeds.
location ~* \.(?:rss|atom)$ {
    expires 1h;
    add_header Cache-Control "public";
}
location ~* \.json {
    expires 1h;
    add_header Cache-Control "public";
}


# Caches images, icons, video, audio, HTC, etc.
location ~* \.(?:jpg|jpeg|gif|png|webp|ico|cur|gz|svg|svgz|mp4|mp3|ogg|ogv|webm|htc|woff|woff2)$ {
    expires 1y;
    add_header Cache-Control "public";

    # Comment out these lines if you wish to record access/error logs for static files.
    log_not_found off;
    access_log off;
}

# Cache CSS and JavaScript.
location ~* \.(?:css|js)$ {
    expires 90d;
    add_header Cache-Control "public";
    access_log off;
}
location ~* \?webp {
    expires 1y;
    add_header Cache-Control "public";
    access_log off;
}
# Don't record access/error logs for robots.txt.
location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
}

###################################################################################################################
# FASTCGI-CACHE
###################################################################################################################

# The key to use when saving cache files, which will run through the MD5 hashing algorithm.
# The key to use when saving cache files, which will run through the MD5 hashing algorithm.
fastcgi_cache_key "$scheme$request_method$host$request_uri";

# If an error occurs when communicating with FastCGI server, return cached content.
# Useful for serving cached content if the PHP process dies or timeouts.
fastcgi_cache_use_stale error timeout invalid_header http_500;

# Allow caching of requests which contain the following headers.
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

# Show the cache status in server responses.
add_header Fastcgi-Cache $upstream_cache_status;

# Don't skip by default
set $skip_cache 0;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $skip_cache 1;
}

if ($query_string != "") {
    set $skip_cache 1;
}

# Don't cache uris containing the following segments
if ($request_uri ~* "/wp-admin/|/deploy/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/store.*|/cart.*|/my-account.*|/checkout.*|/addons.*|/ideas.*|/wishlist.*") {
    set $skip_cache 1;
}

# Don't use the cache for cookied logged in users or recent commenters
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in|woocommerce_cart_hash|woocommerce_items_in_cart") {
    set $skip_cache 1;
}

#woocommerce specifc cache buster
if ( $arg_add-to-cart != "" ) {
    set $skip_cache 1;
}

###################################################################################################################
# LIMITS
###################################################################################################################

# How long each connection should stay open for.
keepalive_timeout 15;

# Timeout for reading client request body.
client_body_timeout 30;

# Timeout for reading client request header.
client_header_timeout 30;

# Timeout for transmitting reponse to client.
send_timeout 30;

###################################################################################################################
# CLOUDFLARE
###################################################################################################################

# Generic security enhancements. Use https://securityheaders.io to test
# and recommend further improvements.

# Don't allow pages to be rendered in an iframe on external domains.
add_header X-Frame-Options "SAMEORIGIN" always;

# MIME sniffing prevention
add_header X-Content-Type-Options "nosniff" always;

# Enable cross-site scripting filter in supported browsers.
add_header X-Xss-Protection "1; mode=block" always;

# Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
# only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
# for an in-depth guide on creating a more restrictive policy.

# uncomment out if you are ussing https/SSL
# add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

set_real_ip_from 103.21.244.0/22;
set_real_ip_from 103.22.200.0/22;
set_real_ip_from 103.31.4.0/22;
set_real_ip_from 104.16.0.0/12;
set_real_ip_from 108.162.192.0/18;
set_real_ip_from 131.0.72.0/22;
set_real_ip_from 141.101.64.0/18;
set_real_ip_from 162.158.0.0/15;
set_real_ip_from 172.64.0.0/13;
set_real_ip_from 173.245.48.0/20;
set_real_ip_from 188.114.96.0/20;
set_real_ip_from 190.93.240.0/20;
set_real_ip_from 197.234.240.0/22;
set_real_ip_from 198.41.128.0/17;
set_real_ip_from 2400:cb00::/32;
set_real_ip_from 2606:4700::/32;
set_real_ip_from 2803:f800::/32;
set_real_ip_from 2405:b500::/32;
set_real_ip_from 2405:8100::/32;
set_real_ip_from 2c0f:f248::/32;
set_real_ip_from 2a06:98c0::/29;

real_ip_header CF-Connecting-IP;
#real_ip_header X-Forwarded-For;
real_ip_recursive on;

###################################################################################################################
#